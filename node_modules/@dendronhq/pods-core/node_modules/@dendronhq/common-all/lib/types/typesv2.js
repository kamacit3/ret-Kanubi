"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SeedBrowserMessageType = exports.ThemeMessageType = exports.LookupViewMessageEnum = exports.NoteViewMessageEnum = exports.CalendarViewMessageType = exports.GraphViewMessageType = exports.TreeViewMessageEnum = exports.DMessageEnum = exports.DMessageSource = exports.MergeConflictOptions = exports.isDendronResp = exports.ResponseCode = void 0;
const error_1 = require("../error");
var ResponseCode;
(function (ResponseCode) {
    ResponseCode[ResponseCode["OK"] = 200] = "OK";
    // 412
    ResponseCode[ResponseCode["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
})(ResponseCode = exports.ResponseCode || (exports.ResponseCode = {}));
function isDendronResp(args) {
    return (args === null || args === void 0 ? void 0 : args.error) instanceof error_1.DendronError;
}
exports.isDendronResp = isDendronResp;
var MergeConflictOptions;
(function (MergeConflictOptions) {
    MergeConflictOptions["OVERWRITE_LOCAL"] = "Overwrite local value with remote value";
    MergeConflictOptions["OVERWRITE_REMOTE"] = "Overwrite remote value with local value";
    MergeConflictOptions["SKIP"] = "Skip this conflict(We will not merge, you'll resolve this manually)";
    MergeConflictOptions["SKIP_ALL"] = "Skip All (you'll resolve all next conflicted entries manually) ";
})(MergeConflictOptions = exports.MergeConflictOptions || (exports.MergeConflictOptions = {}));
var DMessageSource;
(function (DMessageSource) {
    DMessageSource["vscode"] = "vscode";
    DMessageSource["webClient"] = "webClient";
})(DMessageSource = exports.DMessageSource || (exports.DMessageSource = {}));
var DMessageEnum;
(function (DMessageEnum) {
    /**
     * View is ready
     */
    DMessageEnum["INIT"] = "init";
    DMessageEnum["ON_DID_CHANGE_ACTIVE_TEXT_EDITOR"] = "onDidChangeActiveTextEditor";
    DMessageEnum["MESSAGE_DISPATCHER_READY"] = "messageDispatcherReady";
})(DMessageEnum = exports.DMessageEnum || (exports.DMessageEnum = {}));
var TreeViewMessageEnum;
(function (TreeViewMessageEnum) {
    TreeViewMessageEnum["onSelect"] = "onSelect";
    TreeViewMessageEnum["onExpand"] = "onExpand";
    TreeViewMessageEnum["onGetActiveEditor"] = "onGetActiveEditor";
    /**
     * View is ready
     */
    TreeViewMessageEnum["onReady"] = "onReady";
})(TreeViewMessageEnum = exports.TreeViewMessageEnum || (exports.TreeViewMessageEnum = {}));
var GraphViewMessageType;
(function (GraphViewMessageType) {
    GraphViewMessageType["onSelect"] = "onSelect";
    GraphViewMessageType["onGetActiveEditor"] = "onGetActiveEditor";
    GraphViewMessageType["onReady"] = "onReady";
    GraphViewMessageType["onRequestGraphStyle"] = "onRequestGraphStyle";
})(GraphViewMessageType = exports.GraphViewMessageType || (exports.GraphViewMessageType = {}));
var CalendarViewMessageType;
(function (CalendarViewMessageType) {
    CalendarViewMessageType["onSelect"] = "onSelect";
    CalendarViewMessageType["onGetActiveEditor"] = "onGetActiveEditor";
    CalendarViewMessageType["messageDispatcherReady"] = "messageDispatcherReady";
})(CalendarViewMessageType = exports.CalendarViewMessageType || (exports.CalendarViewMessageType = {}));
var NoteViewMessageEnum;
(function (NoteViewMessageEnum) {
    NoteViewMessageEnum["onClick"] = "onClick";
    NoteViewMessageEnum["onGetActiveEditor"] = "onGetActiveEditor";
})(NoteViewMessageEnum = exports.NoteViewMessageEnum || (exports.NoteViewMessageEnum = {}));
var LookupViewMessageEnum;
(function (LookupViewMessageEnum) {
    LookupViewMessageEnum["onUpdate"] = "onUpdate";
    LookupViewMessageEnum["onValuesChange"] = "onValuesChange";
    LookupViewMessageEnum["onRequestControllerState"] = "onRequestControllerState";
})(LookupViewMessageEnum = exports.LookupViewMessageEnum || (exports.LookupViewMessageEnum = {}));
var ThemeMessageType;
(function (ThemeMessageType) {
    ThemeMessageType["onThemeChange"] = "onThemeChange";
    ThemeMessageType["getTheme"] = "getTheme";
})(ThemeMessageType = exports.ThemeMessageType || (exports.ThemeMessageType = {}));
var SeedBrowserMessageType;
(function (SeedBrowserMessageType) {
    SeedBrowserMessageType["onSeedAdd"] = "onSeedAdd";
    SeedBrowserMessageType["onOpenUrl"] = "onOpenUrl";
    SeedBrowserMessageType["onSeedStateChange"] = "onSeedStateChange";
})(SeedBrowserMessageType = exports.SeedBrowserMessageType || (exports.SeedBrowserMessageType = {}));
//# sourceMappingURL=typesv2.js.map