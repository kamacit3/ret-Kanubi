import { DendronError, DStore, DVault, NoteProps, NotePropsDict, NotesCache, NotesCacheEntryMap } from "@dendronhq/common-all";
import { DLogger } from "@dendronhq/common-server";
import { FileMeta } from "./storev2";
import { ParserBase } from "./parseBase";
export declare class NoteParser extends ParserBase {
    opts: {
        store: DStore;
        cache: NotesCache;
        logger: DLogger;
    };
    cache: NotesCache;
    constructor(opts: {
        store: DStore;
        cache: NotesCache;
        logger: DLogger;
    });
    parseFiles(allPaths: string[], vault: DVault): Promise<{
        notes: NoteProps[];
        cacheUpdates: NotesCacheEntryMap;
        errors: DendronError[];
    }>;
    /**
     *
     * @param opts
     * @returns List of all notes added. If a note has no direct parents, stub notes are added instead
     */
    parseNoteProps(opts: {
        fileMeta: FileMeta;
        notesByFname?: NotePropsDict;
        parents?: NoteProps[];
        addParent: boolean;
        createStubs?: boolean;
        vault: DVault;
    }): {
        propsList: NoteProps[];
        noteHash: string;
        matchHash: boolean;
    };
}
