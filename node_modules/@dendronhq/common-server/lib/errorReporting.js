"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.eventModifier = exports.initializeSentry = void 0;
const common_all_1 = require("@dendronhq/common-all");
const integrations_1 = require("@sentry/integrations");
const Sentry = __importStar(require("@sentry/node"));
const path_1 = __importDefault(require("path"));
function initializeSentry(environment) {
    const dsn = "https://bc206b31a30a4595a2efb31e8cc0c04e@o949501.ingest.sentry.io/5898219";
    Sentry.init({
        dsn,
        defaultIntegrations: false,
        tracesSampleRate: 1.0,
        enabled: true,
        environment,
        attachStacktrace: true,
        beforeSend: eventModifier,
        integrations: [
            new integrations_1.RewriteFrames({
                prefix: "app:///dist/",
                iteratee: (frame) => {
                    if (frame.abs_path) {
                        // Convert backslash to forward slash; Sentry should be able to handle the rest of the formatting:
                        frame.abs_path = frame.abs_path
                            .split(path_1.default.sep)
                            .join(path_1.default.posix.sep);
                    }
                    return frame;
                },
            }),
        ],
    });
    return;
}
exports.initializeSentry = initializeSentry;
function eventModifier(event, hint) {
    var _a;
    const error = hint === null || hint === void 0 ? void 0 : hint.originalException;
    // Add more information to the event extras payload:
    if (error && error instanceof common_all_1.DendronError) {
        event.extra = {
            name: error.name,
            message: error.message,
            payload: error.payload,
            severity: (_a = error.severity) === null || _a === void 0 ? void 0 : _a.toString(),
            code: error.code,
            status: error.status,
            innerError: error,
        };
    }
    return event;
}
exports.eventModifier = eventModifier;
//# sourceMappingURL=errorReporting.js.map