import { IntermediateDendronConfig, DVault, DWorkspace, NoteProps } from "@dendronhq/common-all";
import simpleGit, { SimpleGit } from "simple-git";
export { simpleGit, SimpleGit };
/**
 *  NOTICE: Lots of the Git code is obtained from https://github.com/KnisterPeter/vscode-github, licened under MIT
 */
/**
 * Utilities for working with git urls
 */
export declare class GitUtils {
    static canShowGitLink(opts: {
        config: IntermediateDendronConfig;
        note: NoteProps;
    }): boolean;
    /**
     * Convert a github repo orul to access token format
     */
    static getGithubAccessTokenUrl(opts: {
        remotePath: string;
        accessToken: string;
    }): string;
    static git2Github(gitUrl: string): string;
    static getGithubEditUrl(opts: {
        note: NoteProps;
        config: IntermediateDendronConfig;
        wsRoot: string;
    }): string;
    static getOwnerAndRepoFromURL(url: string): {
        owner: string;
        repo: string;
    };
    static getRepoNameFromURL(url: string): string;
    static getVaultFromRepo(opts: {
        repoPath: string;
        repoUrl: string;
        wsRoot: string;
    }): DVault;
    static getVaultsFromRepo(opts: {
        repoPath: string;
        repoUrl: string;
        wsRoot: string;
    }): {
        vaults: DVault[];
        workspace?: DWorkspace;
    };
    static isRepo(src: string): boolean;
    static getGitRoot(uri: string): Promise<string | undefined>;
    static getGithubFileUrl(uri: string, file: string, line?: number, endLine?: number): Promise<string>;
    static getGitHostname(uri: string): Promise<string>;
    /**
     * Looks at URI for git repo
     * @param uri
     * @returns
     */
    static getGitProviderOwnerAndRepositoryFromGitConfig(uri: string): Promise<string[]>;
    static getRemoteName(uri: string): Promise<string>;
    static calculateRemoteName(uri: string): Promise<string | undefined>;
    static parseGitUrl(remote: string): string[];
    static parseGitProviderUrl(remote: string): string[];
    static getGitProviderOwnerAndRepositoryFromHttpUrl(remote: string): string[];
    static getRemoteNames(uri: string): Promise<string[]>;
    static getGitProviderOwnerAndRepository(uri: string): Promise<string[]>;
    static getCurrentBranch(uri: string): Promise<string | undefined>;
    static execute(cmd: string, uri: string): Promise<{
        stdout: string;
        stderr: string;
    }>;
}
