import { IntermediateDendronConfig, DendronSiteConfig, DuplicateNoteBehavior, DVault, HierarchyConfig, NotePropsDict, NoteProps, BooleanResp } from "@dendronhq/common-all";
import { DEngineClient } from "../types";
export declare class SiteUtils {
    static canPublish(opts: {
        note: NoteProps;
        config: IntermediateDendronConfig;
        engine: DEngineClient;
    }): boolean;
    static isPublished(opts: {
        note: NoteProps;
        config: IntermediateDendronConfig;
        engine: DEngineClient;
    }): boolean;
    static copyAssets(opts: {
        wsRoot: string;
        vault: DVault;
        siteAssetsDir: string;
        /**
         * Delete existing siteAssets
         */
        deleteSiteAssetsDir?: boolean;
    }): Promise<void>;
    static addSiteOnlyNotes(opts: {
        engine: DEngineClient;
    }): NoteProps[];
    static filterByConfig(opts: {
        engine: DEngineClient;
        config: IntermediateDendronConfig;
        noExpandSingleDomain?: boolean;
    }): Promise<{
        notes: NotePropsDict;
        domains: NoteProps[];
    }>;
    /**
     * Filter notes to be published using hiearchy
     */
    static filterByHiearchy(opts: {
        domain: string;
        config: IntermediateDendronConfig;
        engine: DEngineClient;
        navOrder: number;
    }): Promise<{
        notes: NotePropsDict;
        domain: NoteProps;
    } | undefined>;
    /**
     * Apply custom frontmatter and formatting to note
     */
    static cleanNote({ note, hConfig, }: {
        note: NoteProps;
        hConfig: HierarchyConfig;
    }): {
        body: string;
        id: string;
        title: string;
        desc: string;
        updated: number;
        created: number;
        config?: Partial<{
            global: Partial<Pick<import("@dendronhq/common-all").DendronGlobalConfig, "enablePrettyRefs" | "enableChildLinks">>;
        }> | undefined;
        fname: string;
        links: import("@dendronhq/common-all").DLink[];
        anchors: {
            [index: string]: import("@dendronhq/common-all").DNoteAnchorPositioned | undefined;
        };
        type: import("@dendronhq/common-all").DNodeType;
        stub?: boolean | undefined;
        schemaStub?: boolean | undefined;
        parent: string | null;
        children: string[];
        data: any;
        custom?: any;
        schema?: {
            moduleId: string;
            schemaId: string;
        } | undefined;
        vault: DVault;
        contentHash?: string | undefined;
        color?: string | undefined;
        tags?: string | string[] | undefined;
        image?: import("@dendronhq/common-all").DNodeImage | undefined;
        traits?: import("@dendronhq/common-all").NoteTrait[] | undefined;
    };
    static getConfigForHierarchy(opts: {
        config: DendronSiteConfig;
        noteOrName: NoteProps | string;
    }): HierarchyConfig;
    static getDomains(opts: {
        notes: NotePropsDict;
        config: DendronSiteConfig;
    }): NoteProps[];
    static getSiteOutputPath(opts: {
        config: IntermediateDendronConfig;
        wsRoot: string;
        stage: "dev" | "prod";
    }): string;
    static handleDup(opts: {
        dupBehavior?: DuplicateNoteBehavior;
        allowStubs?: boolean;
        engine: DEngineClient;
        fname: string;
        config: IntermediateDendronConfig;
        noteCandidates: NoteProps[];
        noteDict: NotePropsDict;
    }): NoteProps | undefined;
    static validateConfig(sconfig: DendronSiteConfig): BooleanResp;
}
