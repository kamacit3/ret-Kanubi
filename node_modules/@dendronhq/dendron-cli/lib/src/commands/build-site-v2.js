"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BuildSiteV2CLICommand = void 0;
const common_server_1 = require("@dendronhq/common-server");
const engine_server_1 = require("@dendronhq/engine-server");
const fs_extra_1 = __importDefault(require("fs-extra"));
const lodash_1 = __importDefault(require("lodash"));
const path_1 = __importDefault(require("path"));
const base_1 = require("./base");
const utils_1 = require("./utils");
class BuildSiteV2CLICommand extends base_1.CLICommand {
    constructor(name) {
        super({
            name: name || "buildSiteV2",
            desc: "build notes for publication using 11ty",
        });
    }
    buildArgs(args) {
        super.buildArgs(args);
        (0, utils_1.setupEngineArgs)(args);
        args.option("serve", {
            describe: "serve over local http server",
            default: false,
            type: "boolean",
        });
        args.option("stage", {
            describe: "serve over local http server",
            default: "dev",
            choices: ["dev", "prod"],
        });
        args.option("output", {
            describe: "if set, override output from config.yml",
            type: "string",
        });
        args.option("custom11tyPath", {
            describe: "if set, path to custom 11ty installation",
            type: "string",
        });
    }
    async enrichArgs(args) {
        const engineArgs = await (0, utils_1.setupEngine)(args);
        this.L.info({ msg: `connecting to engine on port: ${engineArgs.port}` });
        // add site specific notes
        if (args.enginePort) {
            const siteNotes = engine_server_1.SiteUtils.addSiteOnlyNotes({
                engine: engineArgs.engine,
            });
            lodash_1.default.forEach(siteNotes, (ent) => {
                engineArgs.engine.notes[ent.id] = ent;
            });
        }
        return { data: { ...args, ...engineArgs } };
    }
    async execute(opts) {
        const { wsRoot, port, stage, output, server, engine } = lodash_1.default.defaults(opts);
        let cwd = opts.cwd;
        if (!cwd) {
            // need to be inside
            let nmPath = (0, common_server_1.goUpTo)({ base: __dirname, fname: "node_modules" });
            cwd = path_1.default.join(nmPath, "node_modules", "@dendronhq", "dendron-11ty-legacy");
            // fix for /home/runner/work/dendron-site/dendron-site/node_modules/@dendronhq/dendron-cli/node_modules/@dendronhq/...
            if (!fs_extra_1.default.existsSync(cwd)) {
                nmPath = (0, common_server_1.goUpTo)({
                    base: path_1.default.join(nmPath, ".."),
                    fname: "node_modules",
                });
                cwd = path_1.default.join(nmPath, "node_modules", "@dendronhq", "dendron-11ty-legacy");
            }
        }
        process.env["ENGINE_PORT"] = lodash_1.default.toString(port);
        process.env["WS_ROOT"] = wsRoot;
        process.env["BUILD_STAGE"] = stage;
        if (output) {
            process.env["OUTPUT"] = output;
        }
        let compile;
        let buildNav;
        let copyAssets;
        let buildStyles;
        let buildSearch;
        let getEngine;
        if (opts.eleventy) {
            ({ compile, buildNav, copyAssets, buildStyles, buildSearch, getEngine } =
                opts.eleventy);
        }
        else {
            if (opts.custom11tyPath) {
                ({
                    compile,
                    buildNav,
                    copyAssets,
                    buildStyles,
                    buildSearch,
                    getEngine,
                } = require(opts.custom11tyPath));
            }
            else {
                ({
                    compile,
                    buildNav,
                    copyAssets,
                    buildStyles,
                    buildSearch,
                    getEngine,
                } = require("@dendronhq/dendron-11ty-legacy"));
            }
        }
        // introduced in version 0.41
        if (getEngine) {
            // force re-initialization
            await getEngine(true);
        }
        this.L.info("running pre-compile");
        await Promise.all([buildNav(), copyAssets()]);
        if (engine.config.site.generateChangelog) {
            await (0, engine_server_1.generateChangelog)(opts.engine);
        }
        this.L.info("running compile");
        await compile({ cwd }, { serve: opts.serve, port: engine.config.site.previewPort || 8080 });
        this.L.info("running post-compile");
        await Promise.all([buildStyles(), buildSearch()]);
        if (!opts.serve) {
            this.L.info({ msg: "done compiling" });
            setTimeout(() => {
                // in case server doesn't close, force close
                const maxTimeout = setTimeout(() => {
                    console.log("closing via timeout");
                    process.exit(0);
                }, 1000);
                server.close((err) => {
                    this.L.info({ msg: "closing server" });
                    if (err) {
                        this.L.error({ msg: "error closing", payload: err });
                    }
                    clearTimeout(maxTimeout);
                    if (process.env.GITHUB_ACTIONS) {
                        console.log("closing via github action");
                        process.exit(0);
                    }
                });
            }, 5000);
        }
        return {};
    }
}
exports.BuildSiteV2CLICommand = BuildSiteV2CLICommand;
//# sourceMappingURL=build-site-v2.js.map