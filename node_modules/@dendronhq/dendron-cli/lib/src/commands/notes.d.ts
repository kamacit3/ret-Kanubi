/// <reference types="node" />
import { DendronError } from "@dendronhq/common-all";
import yargs from "yargs";
import { CLICommand, CommandCommonProps } from "./base";
import { SetupEngineResp } from "./utils";
declare type CommandCLIOpts = {
    wsRoot: string;
    vault?: string;
    enginePort?: number;
    query?: string;
    cmd: NoteCommands;
    output?: NoteCLIOutput;
};
export declare enum NoteCLIOutput {
    JSON = "json",
    MARKDOWN_GFM = "md_gfm",
    MARKDOWN_DENDRON = "md_dendron"
}
declare type CommandOpts = CommandCLIOpts & SetupEngineResp & CommandCommonProps;
declare type CommandOutput = {
    data: any;
    error?: DendronError;
};
export declare enum NoteCommands {
    LOOKUP = "lookup",
    DELETE = "delete"
}
export { CommandOpts as NoteCLICommandOpts };
export declare class NoteCLICommand extends CLICommand<CommandOpts, CommandOutput> {
    constructor();
    buildArgs(args: yargs.Argv): void;
    enrichArgs(args: CommandCLIOpts): Promise<{
        data: {
            wsRoot: string;
            engine: import("@dendronhq/common-all").DEngineClient;
            port: number;
            server: import("@dendronhq/api-server").Server;
            serverSockets?: Set<import("net").Socket> | undefined;
            vault?: string | undefined;
            enginePort?: number | undefined;
            query?: string | undefined;
            cmd: NoteCommands;
            output?: NoteCLIOutput | undefined;
        };
    }>;
    execute(opts: CommandOpts): Promise<{
        data: {
            payload: string;
            rawData: import("@dendronhq/common-all").GetNotePayload | undefined;
        };
    } | {
        data: {
            payload: string;
            rawData: Required<import("@dendronhq/common-all").RespV2<import("@dendronhq/common-all").EngineDeleteNotePayload>>;
        };
    }>;
}
