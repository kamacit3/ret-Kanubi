import { DendronError } from "@dendronhq/common-all";
import yargs from "yargs";
import { ExtensionTarget, PublishEndpoint, SemverVersion } from "../utils/build";
import { CLICommand, CommandCommonProps } from "./base";
declare type CommandCLIOpts = {
    cmd: DevCommands;
};
export declare enum DevCommands {
    GENERATE_JSON_SCHEMA_FROM_CONFIG = "generate_json_schema_from_config",
    BUILD = "build",
    BUMP_VERSION = "bump_version",
    PUBLISH = "publish",
    SYNC_ASSETS = "sync_assets",
    PREP_PLUGIN = "prep_plugin",
    PACKAGE_PLUGIN = "package_plugin",
    INSTALL_PLUGIN = "install_plugin",
    ENABLE_TELEMETRY = "enable_telemetry",
    DISABLE_TELEMETRY = "disable_telemetry",
    SHOW_TELEMETRY = "show_telemetry",
    SHOW_MIGRATIONS = "show_migrations",
    RUN_MIGRATION = "run_migration"
}
declare type CommandOpts = CommandCLIOpts & CommandCommonProps & Partial<BuildCmdOpts> & Partial<RunMigrationOpts>;
declare type CommandOutput = Partial<{
    error: DendronError;
    data: any;
}>;
declare type BuildCmdOpts = {
    publishEndpoint: PublishEndpoint;
    fast?: boolean;
    extensionTarget: ExtensionTarget;
} & BumpVersionOpts & PrepPluginOpts;
declare type BumpVersionOpts = {
    upgradeType: SemverVersion;
} & CommandCLIOpts;
declare type PrepPluginOpts = {
    extensionTarget: ExtensionTarget;
} & CommandCLIOpts;
declare type RunMigrationOpts = {
    migrationVersion: string;
    wsRoot: string;
} & CommandCLIOpts;
export { CommandOpts as DevCLICommandOpts };
/**
 * To use when working on dendron
 */
export declare class DevCLICommand extends CLICommand<CommandOpts, CommandOutput> {
    constructor();
    private setEndpoint;
    buildArgs(args: yargs.Argv): void;
    enrichArgs(args: CommandCLIOpts): Promise<{
        data: {
            cmd: DevCommands;
        };
    }>;
    generateJSONSchemaFromConfig(): Promise<void>;
    execute(opts: CommandOpts): Promise<{
        error: any;
    }>;
    bumpVersion(opts: BumpVersionOpts): Promise<void>;
    build(opts: BuildCmdOpts): Promise<void>;
    /**
     * Takes assets from different monorepo packages and copies them over to the plugin
     * @param param0
     * @returns
     */
    syncAssets({ fast }: {
        fast?: boolean;
    }): Promise<{
        staticPath: string;
    }>;
    validateBuildArgs(opts: CommandOpts): opts is BuildCmdOpts;
    validateBumpVersionArgs(opts: CommandOpts): opts is BumpVersionOpts;
    validatePrepPluginArgs(opts: CommandOpts): opts is PrepPluginOpts;
    validateRunMigrationArgs(opts: CommandOpts): opts is RunMigrationOpts;
    enableTelemetry(): void;
    disableTelemetry(): void;
    showMigrations(): void;
    runMigration(opts: CommandOpts): Promise<void>;
}
