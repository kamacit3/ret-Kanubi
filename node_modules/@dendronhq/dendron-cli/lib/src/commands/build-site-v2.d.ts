/// <reference types="node" />
import { DEngineClient, Stage } from "@dendronhq/common-all";
import yargs from "yargs";
import { CLICommand, CommandCommonProps } from "./base";
declare type CommandCLIOpts = {
    wsRoot: string;
    port?: number;
    engine?: DEngineClient;
    cwd?: string;
    servePort?: number;
    enginePort?: number;
    serve: boolean;
    stage: Stage;
    output?: string;
    custom11tyPath?: string;
};
declare type CommandOpts = CommandCLIOpts & {
    engine: DEngineClient;
    compile?: any;
    server: any;
    eleventy?: any;
} & CommandCommonProps;
declare type CommandOutput = CommandCommonProps;
export { CommandOpts as BuildSiteV2CLICommandOpts };
export { CommandCLIOpts as BuildSiteV2CLICommandCliOpts };
export declare class BuildSiteV2CLICommand extends CLICommand<CommandOpts, CommandOutput> {
    constructor(name?: string);
    buildArgs(args: yargs.Argv): void;
    enrichArgs(args: CommandCLIOpts): Promise<{
        data: {
            wsRoot: string;
            engine: DEngineClient;
            port: number;
            server: import("@dendronhq/api-server").Server;
            serverSockets?: Set<import("net").Socket> | undefined;
            cwd?: string | undefined;
            servePort?: number | undefined;
            enginePort?: number | undefined;
            serve: boolean;
            stage: Stage;
            output?: string | undefined;
            custom11tyPath?: string | undefined;
        };
    }>;
    execute(opts: CommandOpts): Promise<{}>;
}
