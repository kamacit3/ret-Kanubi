"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.noteRouter = void 0;
const common_server_1 = require("@dendronhq/common-server");
const express_1 = require("express");
const express_async_handler_1 = __importDefault(require("express-async-handler"));
const core_1 = require("../core");
const notes_1 = require("../modules/notes");
const utils_1 = require("../utils");
const router = (0, express_1.Router)();
exports.noteRouter = router;
const L = (0, core_1.getLogger)();
router.post("/delete", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, id, opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.deleteNote(id, opts));
}));
router.post("/getByPath", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, ...opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const resp = await engine.getNoteByPath(opts);
    res.json(resp);
}));
router.get("/info", (0, express_async_handler_1.default)(async (_req, res) => {
    const resp = await notes_1.NoteController.instance().info();
    res.json(resp);
}));
router.post("/rename", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().rename(req.body);
    common_server_1.ExpressUtils.setResponse(res, resp);
}));
router.post("/render", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().render(req.body);
    common_server_1.ExpressUtils.setResponse(res, resp);
}));
router.get("/query", (0, express_async_handler_1.default)(async (req, res) => {
    const resp = await notes_1.NoteController.instance().query(req.query);
    common_server_1.ExpressUtils.setResponse(res, resp);
}));
router.post("/update", (0, express_async_handler_1.default)(async (req, res) => {
    const ctx = "router:note:update";
    // TODO: Convert .update() to RespV2 then use ExpressUtils to set the Response
    const resp = await notes_1.NoteController.instance().update(req.body);
    L.debug({ ctx, msg: "exit", payload: req.body });
    res.json(resp);
}));
router.post("/write", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, node, opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const out = await engine.writeNote(node, opts);
    common_server_1.ExpressUtils.setResponse(res, out);
}));
router.post("/bulkAdd", (0, express_async_handler_1.default)(async (req, res) => {
    const { ws, opts } = req.body;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    const out = await engine.bulkAddNotes(opts);
    common_server_1.ExpressUtils.setResponse(res, out);
}));
router.get("/blocks", (0, express_async_handler_1.default)(async (req, res) => {
    const { id, ws, filterByAnchorType } = req.query;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.getNoteBlocks({ id, filterByAnchorType }));
}));
router.post("/decorations", (0, express_async_handler_1.default)(async (req, res) => {
    const opts = req.body;
    const { ws } = opts;
    const engine = await (0, utils_1.getWSEngine)({ ws: ws || "" });
    common_server_1.ExpressUtils.setResponse(res, await engine.getDecorations(opts));
}));
//# sourceMappingURL=note.js.map