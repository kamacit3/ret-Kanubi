"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceController = void 0;
const common_all_1 = require("@dendronhq/common-all");
const engine_server_1 = require("@dendronhq/engine-server");
const core_1 = require("../../core");
const utils_1 = require("../../utils");
const common_server_1 = require("@dendronhq/common-server");
class WorkspaceController {
    static instance() {
        if (!WorkspaceController.singleton) {
            WorkspaceController.singleton = new WorkspaceController();
        }
        return WorkspaceController.singleton;
    }
    async init({ uri }) {
        const start = process.hrtime();
        let notes;
        let schemas;
        const ctx = "WorkspaceController:init";
        const logger = (0, core_1.getLogger)();
        logger.info({ ctx, msg: "enter", uri });
        const engine = engine_server_1.DendronEngineV2.create({
            wsRoot: uri,
            logger,
        });
        let { error } = await engine.init();
        if (error && error.severity === common_all_1.ERROR_SEVERITY.FATAL) {
            logger.error({ ctx, msg: "fatal error initializing notes", error });
            return { error };
        }
        notes = engine.notes;
        schemas = engine.schemas;
        await (0, utils_1.putWS)({ ws: uri, engine });
        const duration = (0, common_server_1.getDurationMilliseconds)(start);
        logger.info({ ctx, msg: "finish init", duration, uri, error });
        if (error) {
            error = (0, common_all_1.error2PlainObject)(error);
        }
        const payload = {
            error,
            data: {
                notes,
                schemas,
                config: engine.config,
                vaults: engine.vaults,
                wsRoot: engine.wsRoot,
            },
        };
        return payload;
    }
    async sync({ ws }) {
        const engine = await (0, utils_1.getWSEngine)({ ws });
        const { notes, schemas } = engine;
        return {
            error: null,
            data: {
                notes,
                schemas,
                config: engine.config,
                vaults: engine.vaults,
                wsRoot: engine.wsRoot,
            },
        };
    }
}
exports.WorkspaceController = WorkspaceController;
//# sourceMappingURL=index.js.map