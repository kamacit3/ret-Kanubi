"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DendronTreeViewKey = exports.DendronWebViewKey = exports.SeedBrowserMessageType = exports.ThemeMessageType = exports.NoteViewMessageType = exports.CalendarViewMessageType = exports.GraphViewMessageType = exports.TreeViewMessageType = exports.DMessageType = exports.DMessageSource = exports.isDendronResp = exports.ResponseCode = void 0;
const error_1 = require("../error");
var ResponseCode;
(function (ResponseCode) {
    ResponseCode[ResponseCode["OK"] = 200] = "OK";
    // 412
    ResponseCode[ResponseCode["PRECONDITION_FAILED"] = 412] = "PRECONDITION_FAILED";
})(ResponseCode = exports.ResponseCode || (exports.ResponseCode = {}));
function isDendronResp(args) {
    return (args === null || args === void 0 ? void 0 : args.error) instanceof error_1.DendronError;
}
exports.isDendronResp = isDendronResp;
var DMessageSource;
(function (DMessageSource) {
    DMessageSource["vscode"] = "vscode";
    DMessageSource["webClient"] = "webClient";
})(DMessageSource = exports.DMessageSource || (exports.DMessageSource = {}));
var DMessageType;
(function (DMessageType) {
    DMessageType["INIT"] = "init";
    DMessageType["ON_DID_CHANGE_ACTIVE_TEXT_EDITOR"] = "onDidChangeActiveTextEditor";
    DMessageType["MESSAGE_DISPATCHER_READY"] = "messageDispatcherReady";
})(DMessageType = exports.DMessageType || (exports.DMessageType = {}));
var TreeViewMessageType;
(function (TreeViewMessageType) {
    TreeViewMessageType["onSelect"] = "onSelect";
    TreeViewMessageType["onExpand"] = "onExpand";
    TreeViewMessageType["onGetActiveEditor"] = "onGetActiveEditor";
    /**
     * View is ready
     */
    TreeViewMessageType["onReady"] = "onReady";
})(TreeViewMessageType = exports.TreeViewMessageType || (exports.TreeViewMessageType = {}));
var GraphViewMessageType;
(function (GraphViewMessageType) {
    GraphViewMessageType["onSelect"] = "onSelect";
    GraphViewMessageType["onGetActiveEditor"] = "onGetActiveEditor";
    GraphViewMessageType["onReady"] = "onReady";
    GraphViewMessageType["onRequestGraphStyle"] = "onRequestGraphStyle";
})(GraphViewMessageType = exports.GraphViewMessageType || (exports.GraphViewMessageType = {}));
var CalendarViewMessageType;
(function (CalendarViewMessageType) {
    CalendarViewMessageType["onSelect"] = "onSelect";
    CalendarViewMessageType["onGetActiveEditor"] = "onGetActiveEditor";
    CalendarViewMessageType["messageDispatcherReady"] = "messageDispatcherReady";
})(CalendarViewMessageType = exports.CalendarViewMessageType || (exports.CalendarViewMessageType = {}));
var NoteViewMessageType;
(function (NoteViewMessageType) {
    NoteViewMessageType["onClick"] = "onClick";
    NoteViewMessageType["onGetActiveEditor"] = "onGetActiveEditor";
    NoteViewMessageType["messageDispatcherReady"] = "messageDispatcherReady";
})(NoteViewMessageType = exports.NoteViewMessageType || (exports.NoteViewMessageType = {}));
var ThemeMessageType;
(function (ThemeMessageType) {
    ThemeMessageType["onThemeChange"] = "onThemeChange";
    ThemeMessageType["getTheme"] = "getTheme";
})(ThemeMessageType = exports.ThemeMessageType || (exports.ThemeMessageType = {}));
var SeedBrowserMessageType;
(function (SeedBrowserMessageType) {
    SeedBrowserMessageType["onSeedAdd"] = "onSeedAdd";
    SeedBrowserMessageType["onOpenUrl"] = "onOpenUrl";
    SeedBrowserMessageType["onSeedStateChange"] = "onSeedStateChange";
})(SeedBrowserMessageType = exports.SeedBrowserMessageType || (exports.SeedBrowserMessageType = {}));
// --- Views
var DendronWebViewKey;
(function (DendronWebViewKey) {
    DendronWebViewKey["CONFIGURE"] = "dendron.configure";
    DendronWebViewKey["NOTE_GRAPH"] = "dendron.graph-note";
    DendronWebViewKey["SCHEMA_GRAPH"] = "dendron.graph-schema";
    DendronWebViewKey["NOTE_PREVIEW"] = "dendron.note-preview";
    DendronWebViewKey["SEED_BROWSER"] = "dendron.seed-browser";
})(DendronWebViewKey = exports.DendronWebViewKey || (exports.DendronWebViewKey = {}));
var DendronTreeViewKey;
(function (DendronTreeViewKey) {
    DendronTreeViewKey["SAMPLE_VIEW"] = "dendron.sample";
    DendronTreeViewKey["TREE_VIEW"] = "dendron.treeView";
    DendronTreeViewKey["TREE_VIEW_V2"] = "dendron.tree-view";
    DendronTreeViewKey["BACKLINKS"] = "dendron.backlinks";
    DendronTreeViewKey["CALENDAR_VIEW"] = "dendron.calendar-view";
})(DendronTreeViewKey = exports.DendronTreeViewKey || (exports.DendronTreeViewKey = {}));
//# sourceMappingURL=typesv2.js.map