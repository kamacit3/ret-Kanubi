"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DendronEvents = exports.ContextualUIEvents = exports.MigrationEvents = exports.ConfigEvents = exports.SurveyEvents = exports.ExtensionEvents = exports.TutorialEvents = exports.CLIEvents = exports.VSCodeEvents = void 0;
var VSCodeEvents;
(function (VSCodeEvents) {
    VSCodeEvents["ServerCrashed"] = "ServerCrashed";
    VSCodeEvents["InitializeWorkspace"] = "InitializeWorkspace";
    VSCodeEvents["Install"] = "Install";
    VSCodeEvents["SchemaLookup_Show"] = "SchemaLookup_Show";
    VSCodeEvents["NoteLookup_Gather"] = "NoteLookup_Gather";
    VSCodeEvents["SchemaLookup_Gather"] = "SchemaLookup_Gather";
    VSCodeEvents["NoteLookup_Update"] = "NoteLookup_Update";
    VSCodeEvents["SchemaLookup_Update"] = "SchemaLookup_Update";
    VSCodeEvents["NoteLookup_Accept"] = "NoteLookup_Accept";
    VSCodeEvents["SchemaLookup_Accept"] = "SchemaLookup_Accept";
    VSCodeEvents["TreeView_Ready"] = "TreeView_Ready";
    VSCodeEvents["Upgrade"] = "Upgrade";
    VSCodeEvents["DisableTelemetry"] = "DisableTelemetry";
    VSCodeEvents["EnableTelemetry"] = "EnableTelemetry";
    VSCodeEvents["Uninstall"] = "Uninstall";
    VSCodeEvents["ShowLapsedUserMessage"] = "Show_Lapsed_User_Msg";
    VSCodeEvents["LapsedUserMessageAccepted"] = "Lapsed_User_Msg_Accepted";
    VSCodeEvents["LapsedUserMessageRejected"] = "Show_Lapsed_User_Rejected";
    VSCodeEvents["UserOnOldVSCodeVerUnblocked"] = "User_On_Old_VSCode_Ver_Unblocked";
})(VSCodeEvents = exports.VSCodeEvents || (exports.VSCodeEvents = {}));
var CLIEvents;
(function (CLIEvents) {
    CLIEvents["CLITelemetryEnabled"] = "CLI_Telemetry_Enabled";
    CLIEvents["CLITelemetryDisabled"] = "CLI_Telemetry_Disabled";
    CLIEvents["CLIMigrationSucceeded"] = "CLI_Migration_Succeeded";
    CLIEvents["CLIMigrationFailed"] = "CLI_Migration_Failed";
})(CLIEvents = exports.CLIEvents || (exports.CLIEvents = {}));
var TutorialEvents;
(function (TutorialEvents) {
    TutorialEvents["WelcomeShow"] = "WelcomeShow";
    TutorialEvents["Tutorial_0_Show"] = "Tutorial_0_Show";
    TutorialEvents["Tutorial_1_Show"] = "Tutorial_1_Show";
    TutorialEvents["Tutorial_2_Show"] = "Tutorial_2_Show";
    TutorialEvents["Tutorial_3_Show"] = "Tutorial_3_Show";
    TutorialEvents["Tutorial_4_Show"] = "Tutorial_4_Show";
    TutorialEvents["Tutorial_5_Show"] = "Tutorial_5_Show";
})(TutorialEvents = exports.TutorialEvents || (exports.TutorialEvents = {}));
var ExtensionEvents;
(function (ExtensionEvents) {
    ExtensionEvents["VimExtensionInstalled"] = "Vim_Extension_Installed";
})(ExtensionEvents = exports.ExtensionEvents || (exports.ExtensionEvents = {}));
var SurveyEvents;
(function (SurveyEvents) {
    SurveyEvents["InitialSurveyPrompted"] = "Initial_Survey_Prompted";
    SurveyEvents["InitialSurveyAccepted"] = "Initial_Survey_Accepted";
    SurveyEvents["InitialSurveyRejected"] = "Initial_Survey_Rejected";
    SurveyEvents["BackgroundAnswered"] = "Background_Answered";
    SurveyEvents["BackgroundRejected"] = "Background_Rejected";
    SurveyEvents["UseCaseAnswered"] = "Use_Case_Answered";
    SurveyEvents["UseCaseRejected"] = "Use_Case_Rejected";
    SurveyEvents["PriorToolsAnswered"] = "Prior_Tools_Answered";
    SurveyEvents["PriorToolsRejected"] = "Prior_Tools_Rejected";
    SurveyEvents["LapsedUserSurveyPrompted"] = "Lapsed_User_Survey_Prompted";
    SurveyEvents["LapsedUserSurveyAccepted"] = "Lapsed_User_Survey_Accepted";
    SurveyEvents["LapsedUserSurveyRejected"] = "Lapsed_User_Survey_Rejected";
    SurveyEvents["LapsedUserReasonAnswered"] = "Lapsed_User_Reason_Answered";
    SurveyEvents["LapsedUserReasonRejected"] = "Lapsed_User_Reason_Rejected";
    SurveyEvents["LapsedUserGettingStartedHelpAnswered"] = "Lapsed_User_Getting_Started_Help_Answered";
    SurveyEvents["LapsedUserGettingStartedHelpRejected"] = "Lapsed_User_Getting_Started_Help_Rejected";
    SurveyEvents["LapsedUserAdditionalCommentAnswered"] = "Lapsed_User_Additional_Comment_Answered";
    SurveyEvents["LapsedUserAdditionalCommentRejected"] = "Lapsed_User_Additional_Comment_Rejected";
    SurveyEvents["LapsedUserDiscordPlugAnswered"] = "Lapsed_User_Discord_Plug_Answered";
    SurveyEvents["LapsedUserDiscordPlugRejected"] = "Lapsed_User_Discord_Plug_Rejected";
})(SurveyEvents = exports.SurveyEvents || (exports.SurveyEvents = {}));
var ConfigEvents;
(function (ConfigEvents) {
    ConfigEvents["ConfigNotMigrated"] = "Config_Not_Migrated";
})(ConfigEvents = exports.ConfigEvents || (exports.ConfigEvents = {}));
var MigrationEvents;
(function (MigrationEvents) {
    MigrationEvents["MigrationSucceeded"] = "Migration_Succeeded";
    MigrationEvents["MigrationFailed"] = "Migration_Failed";
})(MigrationEvents = exports.MigrationEvents || (exports.MigrationEvents = {}));
var ContextualUIEvents;
(function (ContextualUIEvents) {
    ContextualUIEvents["ContextualUIRename"] = "ContextualUI_Rename";
    ContextualUIEvents["ContextualUICreateNewFile"] = "ContextualUI_CreateNewFile";
    ContextualUIEvents["ContextualUIDelete"] = "ContextualUI_Delete";
    ContextualUIEvents["ContextualUICodeAction"] = "ContextualUI_CodeAction";
})(ContextualUIEvents = exports.ContextualUIEvents || (exports.ContextualUIEvents = {}));
exports.DendronEvents = {
    VSCodeEvents,
    CLIEvents,
    TutorialEvents,
    ExtensionEvents,
    SurveyEvents,
    ConfigEvents,
    ContextualUIEvents,
};
//# sourceMappingURL=analytics.js.map