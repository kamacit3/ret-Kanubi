"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.WORKSPACE = void 0;
const types_1 = require("../../types/configs/workspace/types");
const base_1 = require("./base");
const ADD_BEHAVIOR = {
    [types_1.NoteAddBehaviorEnum.childOfDomain]: {
        value: "childOfDomain",
        label: "Child of Domain",
        desc: "Note is added as the child of domain of the current hierarchy",
    },
    [types_1.NoteAddBehaviorEnum.childOfDomainNamespace]: {
        value: "childOfDomainNamespace",
        label: "Child of Domain Namespace",
        desc: "Note is added as child of the namespace of the current domain if it has a namespace. Otherwise added as child of domain.",
    },
    [types_1.NoteAddBehaviorEnum.childOfCurrent]: {
        value: "childOfCurrent",
        label: "Child of Current",
        desc: "Note is added as a child of the current open note",
    },
    [types_1.NoteAddBehaviorEnum.asOwnDomain]: {
        value: "asOwnDomain",
        label: "as Own Domain",
        desc: "Note is created under the domain specified by journal name value",
    },
};
const GRAPH = {
    zoomSpeed: {
        label: "Zoom Speed",
        desc: "The speed at which the graph zooms in and out. Lower is slower, higher is faster.",
    },
};
/**
 * Given a {@link dayOfWeekNumber}, returns a {@link DendronConfigEntry} that holds
 * user friendly description of the first day of week behavior.
 *
 * @param value {@link dayOfWeekNumber}
 * @returns DendronConfigEntry
 */
// const FIRST_DAY_OF_WEEK = (
//   value: dayOfWeekNumber
// ): DendronConfigEntry<dayOfWeekNumber> => {
//   const dayOfWeek = [
//     "Sunday",
//     "Monday",
//     "Tuesday",
//     "Wednesday",
//     "Thursday",
//     "Friday",
//     "Saturday",
//   ];
//   const valueToDay = dayOfWeek[value];
//   return {
//     value,
//     label: valueToDay,
//     desc: `Set start of the week to ${valueToDay}`,
//   };
// };
const JOURNAL = {
    dailyDomain: {
        label: "Daily Domain",
        desc: "Domain where the journal notes are created",
    },
    dailyVault: {
        label: "Daily Vault",
        desc: "Name of vault where daily journal should be in",
    },
    name: {
        label: "Journal Name",
        desc: "Name used for journal notes",
    },
    dateFormat: {
        label: "Date Format",
        desc: "Date format used for journal notes",
    },
    addBehavior: ADD_BEHAVIOR,
    // firstDayOfWeek: FIRST_DAY_OF_WEEK,
};
const SCRATCH = {
    name: {
        label: "Scratch Name",
        desc: "Name used for scratch notes",
    },
    dateFormat: {
        label: "Date Format",
        desc: "Date format used for scratch notes",
    },
    addBehavior: ADD_BEHAVIOR,
};
exports.WORKSPACE = {
    dendronVersion: {
        label: "Dendron version",
        desc: "Dendron version. Set up by plugin.",
    },
    workspaces: {
        label: "Workspaces",
        desc: "Workspaces",
    },
    seeds: {
        label: "Seeds",
        desc: "Seeds",
    },
    vaults: {
        label: "Vaults",
        desc: "Vaults",
    },
    hooks: {
        label: "Hooks",
        desc: "Hooks",
    },
    journal: JOURNAL,
    scratch: SCRATCH,
    graph: GRAPH,
    disableTelemetry: {
        label: `Disable Telemetry`,
        desc: `Disable telemetry that collects usage data to help improve Dendron.`,
    },
    enableAutoCreateOnDefinition: {
        label: "Enable auto create on definition",
        desc: "Automatically create note when looking up definition",
    },
    enableXVaultWikiLink: {
        label: "Enable cross-vault wikilink",
        desc: "Enable cross-vault wikilinks",
    },
    enableRemoteVaultInit: {
        label: "Enable Remote Vault Init",
        desc: "Enable initializing remote vaults on startup.",
    },
    workspaceVaultSyncMode: base_1.VAULT_SYNC_MODES,
    enableAutoFoldFrontmatter: {
        label: "Enable Auto Fold Frontmatter",
        desc: "Enable Automatically folding frontmatter block when opening a new note.",
    },
    maxPreviewsCached: {
        label: "Max Preview Cached",
        desc: "Maximum number of rendered previews to cache.",
    },
    maxNoteLength: {
        label: "Max Note Length",
        desc: "Maximum number of characters in a note. Notes with characters exceeding this number will have some Dendron features disabled.",
    },
    feedback: {
        label: "Feedback",
        desc: "Enable feedback widget.",
    },
    apiEndpoint: {
        label: "API Endpoint",
        desc: "Endpoint for backend API functionality.",
    },
};
//# sourceMappingURL=workspace.js.map