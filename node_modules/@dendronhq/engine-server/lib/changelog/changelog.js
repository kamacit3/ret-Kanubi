"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateChangelog = exports.ChangelogGenerator = void 0;
const common_all_1 = require("@dendronhq/common-all");
const Diff2Html = __importStar(require("diff2html"));
const execa_1 = __importDefault(require("execa"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const site_1 = require("../topics/site");
class ChangelogGenerator {
    static getChangelogDataPath(wsRoot) {
        const buildDir = path_1.default.join(wsRoot, "build");
        fs_extra_1.default.ensureDirSync(buildDir);
        return path_1.default.join(buildDir, "changes.json");
    }
}
exports.ChangelogGenerator = ChangelogGenerator;
async function getLastCommit(wsRoot) {
    // get last commit hash
    try {
        const { stdout } = await execa_1.default("git", [`log`, `--pretty=format:'%h'`, `-n`, `1`], { cwd: wsRoot });
        // use slice as there are quotes around the commit hash
        return stdout.slice(1, -1);
    }
    catch (error) {
        throw error;
    }
}
function canShowDiff(opts) {
    const { engine, filePath } = opts;
    const { wsRoot, vaults: vaults } = engine;
    return vaults.some((vault) => {
        if (filePath.startsWith(vault.fsPath) && filePath.endsWith(".md")) {
            const fname = path_1.default.basename(filePath.split(vault.fsPath)[1], ".md");
            const note = common_all_1.NoteUtils.getNoteByFnameV5({
                fname,
                notes: engine.notes,
                vault,
                wsRoot,
            });
            if (!note) {
                return false;
            }
            return site_1.SiteUtils.canPublish({ note, config: engine.config, engine });
        }
        else {
            return false;
        }
    });
}
/**
 * Return undefined if no changes, otherwise string with last commit
 */
// @ts-ignore
function getLastChangelogCommit(engine) {
    const buildDir = path_1.default.join(engine.wsRoot, "build");
    const changesPath = path_1.default.join(buildDir, "changes.json");
    if (!fs_extra_1.default.existsSync(changesPath)) {
        return undefined;
    }
    else {
        const data = fs_extra_1.default.readJSONSync(changesPath);
        return data.commits[0].commitHash;
    }
}
/**
 * Gets list of notes that were changed + commit hash and save it to file in build/ dir.
 */
async function generateChangelog(engine) {
    const { wsRoot } = engine;
    const changesPath = ChangelogGenerator.getChangelogDataPath(wsRoot);
    // const lastCommit = getLastChangelogCommit(engine);
    //const commits = await getCommitUpTo(wsRoot, lastCommit);
    const commits = [await getLastCommit(wsRoot)];
    const changes = await Promise.all(commits.slice(0, 3).flatMap((commitHash) => {
        return getChanges({
            engine,
            commitHash,
        });
    }));
    fs_extra_1.default.writeJSONSync(changesPath, { commits: changes });
}
exports.generateChangelog = generateChangelog;
// get files changed/added for a repo for the last commit
async function getChanges(opts) {
    const { engine, commitHash } = opts;
    const { wsRoot } = engine;
    let commitDate = "";
    let changes = [];
    let filesChanged = [];
    // get files changed/added
    try {
        const { stdout } = await execa_1.default("git", ["show", "--name-status", commitHash], {
            cwd: wsRoot,
            shell: true,
        });
        let status = stdout.split("\n");
        status.map((result) => {
            if (result.startsWith("M")) {
                let filePath = result.split(" ")[0].substring(2);
                if (canShowDiff({ filePath, engine })) {
                    filesChanged.push(filePath);
                    changes.push({
                        action: "Modified",
                        fname: filePath,
                    });
                }
            }
            else if (result.startsWith("A")) {
                let filePath = result.split(" ")[0].substring(2);
                if (canShowDiff({ filePath, engine })) {
                    filesChanged.push(filePath);
                    changes.push({
                        action: "Added",
                        fname: filePath,
                    });
                }
            }
        });
    }
    catch (error) {
        throw error;
    }
    await Promise.all(changes.map(async (change) => {
        try {
            const { stdout } = await execa_1.default("git", ["show", commitHash, "--", change.fname], { cwd: wsRoot, shell: true });
            change.diff = Diff2Html.html(stdout);
            return Diff2Html.html(stdout);
        }
        catch (error) {
            throw error;
        }
    }));
    // get date of last commit
    try {
        const { stdout } = await execa_1.default("git", ["log", commitHash, "--format=%cd"], {
            cwd: wsRoot,
            shell: true,
        });
        let date = stdout.split(/\s+/).slice(1, 5);
        let day = date[0];
        let month = date[1];
        let year = date[3];
        commitDate = `${day} ${month} ${year}`;
    }
    catch (error) {
        throw error;
    }
    return {
        commitDate: commitDate,
        commitHash: commitHash,
        changes: changes,
    };
}
//# sourceMappingURL=changelog.js.map