"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.noteRefs = void 0;
const utils_1 = require("../../utils");
const types_1 = require("../types");
const utils_2 = require("../utils");
const utils_3 = require("./utils");
const LINK_REGEX = /^\(\((?<ref>[^)]+)\)\)/;
const plugin = function () {
    attachParser(this);
    if (this.Compiler != null) {
        attachCompiler(this);
    }
};
exports.noteRefs = plugin;
function attachParser(proc) {
    function locator(value, fromIndex) {
        return value.indexOf("((", fromIndex);
    }
    function inlineTokenizer(eat, value) {
        const match = LINK_REGEX.exec(value);
        if (match) {
            const linkMatch = match[1].trim();
            const { link } = utils_1.parseDendronRef(linkMatch);
            const { value, alias } = utils_3.LinkUtils.parseLink(linkMatch);
            return eat(match[0])({
                type: "refLink",
                value,
                data: {
                    alias,
                    link,
                },
            });
        }
        return;
    }
    inlineTokenizer.locator = locator;
    const Parser = proc.Parser;
    const inlineTokenizers = Parser.prototype.inlineTokenizers;
    const inlineMethods = Parser.prototype.inlineMethods;
    inlineTokenizers.refLink = inlineTokenizer;
    inlineMethods.splice(inlineMethods.indexOf("link"), 0, "refLink");
    return Parser;
}
function attachCompiler(proc) {
    const Compiler = proc.Compiler;
    const visitors = Compiler.prototype.visitors;
    const { dest } = utils_2.MDUtilsV4.getDendronData(proc);
    if (visitors) {
        visitors.refLink = function (node) {
            const ndata = node.data;
            if (dest === types_1.DendronASTDest.MD_DENDRON) {
                const { fname, alias } = ndata.link.from;
                const { anchorStart, anchorStartOffset, anchorEnd } = ndata.link.data;
                let link = alias ? `${alias}|${fname}` : fname;
                let suffix = "";
                if (anchorStart) {
                    suffix += `#${anchorStart}`;
                }
                if (anchorStartOffset) {
                    suffix += `,${anchorStartOffset}`;
                }
                if (anchorEnd) {
                    suffix += `:#${anchorEnd}`;
                }
                return `((ref:[[${link}]]${suffix}))`;
            }
            return;
        };
    }
}
//# sourceMappingURL=noteRefs.js.map