/**
 * Work directly with git repositories
 */
export declare class Git {
    opts: {
        localUrl: string;
        remoteUrl?: string;
        bare?: boolean;
    };
    static getRepo(fpath: string): Promise<any | false>;
    constructor(opts: {
        localUrl: string;
        remoteUrl?: string;
        bare?: boolean;
    });
    _execute(cmd: string): Promise<{
        stdout: string;
        stderr: string;
    }>;
    isRepo(): Promise<boolean>;
    client(gitArgs: string[]): Promise<string>;
    commit(opts: {
        msg: string;
    }): Promise<void>;
    add(args: string): Promise<void>;
    clone(destOverride?: string): Promise<string>;
    /** Adds the `remoteUrl` set in the constructor as a remote. */
    remoteAdd(): Promise<void>;
    init(): Promise<void>;
    /** Equivalent to `git branch`.
     *
     * @param opts.m Can be used to rename a branch. If `opts.m.oldBranch` is not provided, it's the current branch.
     */
    branch(opts: {
        m?: {
            oldBranch?: string;
            newBranch: string;
        };
    }): Promise<void>;
    pull(): Promise<void>;
    push(setUpstream?: {
        remote: string;
        branch: string;
    }): Promise<void>;
    addAll(): Promise<void>;
    getCommitUpTo(commit?: string): Promise<string[]>;
    getCurrentBranch(): Promise<string>;
    hasChanges(opts?: {
        untrackedFiles?: "all" | "no" | "normal";
    }): Promise<boolean>;
    hasRemote(): Promise<boolean>;
    /** Gets the upstream the current branch is set up to push to, or `undefined` if it is not set up to push anywhere. */
    getUpstream(): Promise<string | undefined>;
    /**
     * @param nameOnly: If true, only return the file names. Otherwise the full diff including contents is returned.
     * @param oldCommit: The old identifier (e.g. commit, tag, branch) that we are diffing against.
     * @param newCommit: The new identifier (e.g. commit, tag, branch) that we are diffing from.
     */
    diff({ nameOnly, oldCommit, newCommit, }: {
        nameOnly?: boolean;
        oldCommit: string;
        newCommit: string;
    } | {
        nameOnly?: boolean;
        oldCommit: undefined;
        newCommit: undefined;
    }): Promise<string>;
}
